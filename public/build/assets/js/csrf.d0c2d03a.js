const t=(t=!0)=>{const e={},n=(()=>{try{const t=document.head.querySelector('meta[name="csrf-token"]');if(t&&t.content)return t.content;const e=document.body.querySelector('meta[name="csrf-token"]');if(e&&e.content)return e.content;if(window.Laravel&&window.Laravel.csrfToken)return window.Laravel.csrfToken;const n=document.cookie.split(";");for(let r=0;r<n.length;r++){const t=n[r].trim();if(t.startsWith("XSRF-TOKEN="))return t.substring(11)}return null}catch(t){return null}})();return n&&(n.includes("%")?e["X-XSRF-TOKEN"]=n:e["X-CSRF-TOKEN"]=n),t&&(e["Content-Type"]="application/json",e.Accept="application/json"),e["X-Requested-With"]="XMLHttpRequest",e},e=()=>{return t=void 0,e=null,n=function*(){try{(yield fetch("/sanctum/csrf-cookie",{method:"GET",credentials:"same-origin",headers:{Accept:"application/json","X-Requested-With":"XMLHttpRequest"}})).ok}catch(t){}},new Promise(((r,o)=>{var c=t=>{try{s(n.next(t))}catch(e){o(e)}},a=t=>{try{s(n.throw(t))}catch(e){o(e)}},s=t=>t.done?r(t.value):Promise.resolve(t.value).then(c,a);s((n=n.apply(t,e)).next())}));var t,e,n};export{t as g,e as r};
